"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from gusto_app_integration.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class Source(str, Enum):
    r"""The source of the company benefit. This can be \"internal\", \"external\", or \"partnered\". Company benefits created via the API default to \"external\". Certain partners can create company benefits with a source of \"partnered\"."""

    INTERNAL = "internal"
    EXTERNAL = "external"
    PARTNERED = "partnered"


class CompanyBenefitTypedDict(TypedDict):
    r"""The representation of a company benefit."""

    uuid: str
    r"""The UUID of the company benefit."""
    version: NotRequired[str]
    r"""The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field."""
    enrollment_count: NotRequired[int]
    r"""The number of employees enrolled in the benefit, only returned when enrollment_count query param is set to true."""
    company_uuid: NotRequired[str]
    r"""The UUID of the company."""
    benefit_type: NotRequired[int]
    r"""The type of the benefit to which the company benefit belongs."""
    active: NotRequired[bool]
    r"""Whether this benefit is active for employee participation. Company benefits may only be deactivated if no employees are actively participating."""
    description: NotRequired[str]
    r"""The description of the company benefit. For example, a company may offer multiple benefits with an ID of 1 (for Medical Insurance). The description would show something more specific like “Kaiser Permanente” or “Blue Cross/ Blue Shield”."""
    source: NotRequired[Source]
    r"""The source of the company benefit. This can be \"internal\", \"external\", or \"partnered\". Company benefits created via the API default to \"external\". Certain partners can create company benefits with a source of \"partnered\"."""
    partner_name: NotRequired[Nullable[str]]
    r"""The partner name of the partner that created the company benefit. For example, \"XYZ Corp\"."""
    deletable: NotRequired[bool]
    r"""Whether this company benefit can be deleted. Deletable will be set to true if the benefit has not been used in payroll, has no employee benefits associated, and the benefit is not owned by Gusto or a Partner"""
    supports_percentage_amounts: NotRequired[bool]
    r"""Whether employee deductions and company contributions can be set as percentages of payroll for an individual employee. This is determined by the type of benefit and is not configurable by the company."""
    responsible_for_employer_taxes: NotRequired[bool]
    r"""Whether the employer is subject to pay employer taxes when an employee is on leave. Only applicable to third party sick pay benefits."""
    responsible_for_employee_w2: NotRequired[bool]
    r"""Whether the employer is subject to file W-2 forms for an employee on leave. Only applicable to third party sick pay benefits."""


class CompanyBenefit(BaseModel):
    r"""The representation of a company benefit."""

    uuid: str
    r"""The UUID of the company benefit."""

    version: Optional[str] = None
    r"""The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field."""

    enrollment_count: Optional[int] = None
    r"""The number of employees enrolled in the benefit, only returned when enrollment_count query param is set to true."""

    company_uuid: Optional[str] = None
    r"""The UUID of the company."""

    benefit_type: Optional[int] = None
    r"""The type of the benefit to which the company benefit belongs."""

    active: Optional[bool] = True
    r"""Whether this benefit is active for employee participation. Company benefits may only be deactivated if no employees are actively participating."""

    description: Optional[str] = None
    r"""The description of the company benefit. For example, a company may offer multiple benefits with an ID of 1 (for Medical Insurance). The description would show something more specific like “Kaiser Permanente” or “Blue Cross/ Blue Shield”."""

    source: Optional[Source] = None
    r"""The source of the company benefit. This can be \"internal\", \"external\", or \"partnered\". Company benefits created via the API default to \"external\". Certain partners can create company benefits with a source of \"partnered\"."""

    partner_name: OptionalNullable[str] = UNSET
    r"""The partner name of the partner that created the company benefit. For example, \"XYZ Corp\"."""

    deletable: Optional[bool] = None
    r"""Whether this company benefit can be deleted. Deletable will be set to true if the benefit has not been used in payroll, has no employee benefits associated, and the benefit is not owned by Gusto or a Partner"""

    supports_percentage_amounts: Optional[bool] = None
    r"""Whether employee deductions and company contributions can be set as percentages of payroll for an individual employee. This is determined by the type of benefit and is not configurable by the company."""

    responsible_for_employer_taxes: Optional[bool] = None
    r"""Whether the employer is subject to pay employer taxes when an employee is on leave. Only applicable to third party sick pay benefits."""

    responsible_for_employee_w2: Optional[bool] = None
    r"""Whether the employer is subject to file W-2 forms for an employee on leave. Only applicable to third party sick pay benefits."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "version",
            "enrollment_count",
            "company_uuid",
            "benefit_type",
            "active",
            "description",
            "source",
            "partner_name",
            "deletable",
            "supports_percentage_amounts",
            "responsible_for_employer_taxes",
            "responsible_for_employee_w2",
        ]
        nullable_fields = ["partner_name"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
